openapi: 3.0.0
info:
  title: Books API
  description: This web service offers information on books
  version: 0.1.9
servers:
- url: http://webservice_booksapps.netlify.org
  description: web service published on netlify
paths:
  /books/{bookId}:
    get:
      summary: Returns a book by ID.
      operationId: booksBookIdGET
      parameters:
      - name: bookId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
      x-swagger-router-controller: Default
    put:
      summary: Update book information
      operationId: booksBookIdPUT
      parameters:
      - name: bookId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Book data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
        required: true
      responses:
        "200":
          description: OK
      x-swagger-router-controller: Default
    delete:
      summary: Delete a book by ID.
      operationId: booksBookIdDELETE
      parameters:
      - name: bookId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
      x-swagger-router-controller: Default
  /books/:
    post:
      summary: Create a new book
      operationId: booksPOST
      requestBody:
        description: Create a new Book
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
        required: true
      responses:
        "200":
          description: OK
      x-swagger-router-controller: Default
  /authors/{authorId}:
    get:
      summary: Returns a author by ID.
      operationId: authorsAuthorIdGET
      parameters:
      - name: authorId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
      x-swagger-router-controller: Default
    put:
      summary: Update author information
      operationId: authorsAuthorIdPUT
      parameters:
      - name: authorId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Author data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
        required: true
      responses:
        "200":
          description: OK
      x-swagger-router-controller: Default
    delete:
      summary: Delete a author by ID.
      operationId: authorsAuthorIdDELETE
      parameters:
      - name: authorId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
      x-swagger-router-controller: Default
  /authors/{authorId}/books:
    get:
      summary: Return author of books by ID.
      operationId: booksauthorIdGET
      parameters:
      - name: authorId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
      x-swagger-router-controller: Default
  /authors/:
    post:
      summary: Create a new author
      operationId: authorsPOST
      requestBody:
        description: Create a new Author
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
        required: true
      responses:
        "200":
          description: OK
      x-swagger-router-controller: Default
  /publishers/{publisherId}:
    get:
      summary: Returns a publisher by ID.
      operationId: publishersPublisherIdGET
      parameters:
      - name: publisherId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Publisher'
      x-swagger-router-controller: Default
    put:
      summary: Update publisher information
      operationId: publishersPublisherIdPUT
      parameters:
      - name: publisherId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Publisher data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Publisher'
        required: true
      responses:
        "200":
          description: OK
      x-swagger-router-controller: Default
    delete:
      summary: Delete a publisher by ID.
      operationId: publishersPublisherIdDELETE
      parameters:
      - name: publisherId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
      x-swagger-router-controller: Default
  /publishers/:
    post:
      summary: Create a new publisher
      operationId: publishersPOST
      requestBody:
        description: Create a new Publisher
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Publisher'
        required: true
      responses:
        "200":
          description: OK
      x-swagger-router-controller: Default
components:
  schemas:
    Book:
      type: object
      properties:
        bookId:
          type: string
        title:
          type: string
        edition:
          type: string
        copyright:
          type: string
        language:
          type: string
        pages:
          type: string
        author:
          type: string
        author_id:
          type: string
        publisher:
          type: string
        publisher_id:
          type: string
      example:
        copyright: "2015"
        pages: "1054"
        author: Silbertzhz
        edition: 4th
        publisher: Mc Graw Hill
        language: ENGLISH
        title: Database System
        bookId: book01
    Author:
      type: object
      properties:
        authorId:
          type: string
        author:
          type: string
        nationality:
          type: string
        birth_year:
          type: string
        fields:
          type: string
        books:
          type: string
      example:
        author: SterbenStark
        nationality: American
        birth_year: "1995"
        fields: "Distributed computing, Operating Systems"
        books: "5"
        authorId: author3
    Publisher:
      type: object
      properties:
        publisherId:
          type: string
        publisher:
          type: string
        country:
          type: string
        founded:
          type: string
        genere:
          type: string
        books:
          type: string
      example:
        publisher: SterbenStark
        country: United States
        founded: "1807"
        genere: Academic
        books: "1"
        publisherId: publisher1
